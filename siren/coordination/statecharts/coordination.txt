@startuml
title Coordination
note top of Node
  ag = set()  # active signal groups
  as = set()  # active signals
  r = {signal_id: Round(0, 0, Schedule())}  # synchronization dict
  color = 'red'
  schedule = Schedule()
  last_change = -1
end note
state "Node" as Node {
  state "Synchronization" as Synchronization {
  }
  --
  state "LightControl" as LightControl {
    [*] --> Off
    state "On" as On {
      On : **entry** / send('light_on', signal=signal_id, color=color)
      On --> Off : broken_signal [event.signal = signal_id]
      On --> Off : [active('Stopped') or schedule.empty(group_id, time)]
      On --> On : [not schedule.empty(group_id, time) and schedule[group_id, time] != color] / color = schedule[group_id, time]; send('light_on', signal=signal_id, color=color)
    }
    state "Off" as Off {
      Off : **entry** / send('light_off'); color == 'red'
      Off :
      Off : **post:** color == 'red'
      Off --> On : [active('Running') and active('HealthyLights')]
    }
  }
  --
  state "SignalHealth" as SignalHealth {
    [*] --> HealthyLights
    state "BrokenLights" as BrokenLights {
      BrokenLights : **entry** / send('broken_signal', group=group_id, signal=signal_id)
    }
    state "HealthyLights" as HealthyLights {
      HealthyLights : **entry** / send('join_signal', group=group_id, signal=signal_id)
      HealthyLights --> BrokenLights : dead_light [event.signal == signal_id]
    }
  }
  --
  state "SignalGroupHealth" as SignalGroupHealth {
    [*] --> StartGroupMonitoring
    state "DeadGroup" as DeadGroup {
      DeadGroup : **entry** / send('dead_group', group=group_id)
      DeadGroup :
      DeadGroup : **inv:** len(as) == 0
      DeadGroup --> HealthyGroup : join_signal / as.add(event.signal)
    }
    state "HealthyGroup" as HealthyGroup {
      HealthyGroup : **entry** / send('group_alive', group=group_id)
      HealthyGroup :
      HealthyGroup : **inv:** len(as) > 0
      HealthyGroup : **inv:** signal_id in as
      HealthyGroup --> HealthyGroup : broken_signal [len(as) > 1] / as.discard(event.signal)
      HealthyGroup --> HealthyGroup : join_signal / as.add(event.signal)
      HealthyGroup --> DeadGroup : broken_signal [len(as) == 1]
    }
    state "StartGroupMonitoring" as StartGroupMonitoring {
      StartGroupMonitoring --> HealthyGroup : join_signal [event.signal == signal_id] / as.add(signal_id)
    }
  }
  --
  state "IntersectionHealth" as IntersectionHealth {
    [*] --> StartIntersectionMonitoring
    state "Stopped" as Stopped {
      Stopped : **inv:** len(ag) < ngi
      Stopped : **inv:** len(ag) >= 0
      Stopped --> Stopped : dead_group [len(ag) > 0] / ag.discard(event.group)
      Stopped --> Running : group_alive [len(ag) + 1 = ngi] / ag.add(event.group)
      Stopped --> Stopped : group_alive [len(ag) + 1 < ngi] / ag.add(event.group)
    }
    state "Running" as Running {
      Running : **inv:** len(ag) == ngi
      Running : **inv:** group_id in ag
      Running --> Stopped : dead_group / ag.discard(event.group)
    }
    state "StartIntersectionMonitoring" as StartIntersectionMonitoring {
      StartIntersectionMonitoring --> Running : group_alive [event.group == group_id and len(ag) + 1 == ngi] / ag.add(group_id)
      StartIntersectionMonitoring --> Stopped : group_alive [event.group == group_id and len(ag) + 1 < ngi] / ag.add(group_id)
    }
  }
}
@enduml
