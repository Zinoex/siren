@startuml
title Coordination
note top of Node
  ag = set()  # active signal groups
  as = set()  # active signals
  hb = {signal_id: 0}
  g = {signal_id: group_id}
  color = 'red'
  schedule = Schedule()
  next_schedule = None
  history = []
end note
state "Node" as Node {
  state "Heartbeat" as Heartbeat {
    [*] --> HeartbeatRest
    state "HeartbeatPrune" as HeartbeatPrune {
      HeartbeatPrune : **entry** / as -= set(map(lambda s: s[0], filter(lambda s: time - s[1] > T + 2 * D, hb.items()))); ag = set(map(lambda s: g[s], as))
      HeartbeatPrune --> HeartbeatRest
    }
    state "HeartbeatSend" as HeartbeatSend {
      HeartbeatSend : **entry** / send('heartbeat', signal=signal_id, group=group_id)
      HeartbeatSend --> HeartbeatRest
    }
    state "HeartbeatReceive" as HeartbeatReceive {
      HeartbeatReceive --> HeartbeatRest
    }
    state "HeartbeatRest" as HeartbeatRest {
      HeartbeatRest --> HeartbeatSend : [time - hb[signal_id] > T]
      HeartbeatRest --> HeartbeatReceive : heartbeat / as.add(event.signal); ag.add(event.group); g[event.signal] = event.group; hb[event.signal] = time
      HeartbeatRest --> HeartbeatPrune : [any(map(lambda heartbeat: time - heartbeat > T + 2 * D, hb.values()))]
    }
  }
  --
  state "ScheduleManagement" as ScheduleManagement {
    [*] --> NoSchedule
    state "IllegalSchedule" as IllegalSchedule {
      IllegalSchedule : **entry** / next_schedule = time_schedule
      [*] --> NewTimeSchedule
      IllegalSchedule --> NewSchedule : schedule [event.schedule.legal(history)] / next_schedule = event.schedule
      state "RunningTimeSchedule" as RunningTimeSchedule {
        RunningTimeSchedule : **entry** / schedule = next_schedule
      }
      state "NewTimeSchedule" as NewTimeSchedule {
        NewTimeSchedule --> RunningTimeSchedule : [next_schedule.compatible(history, time)]
      }
    }
    state "NoSchedule" as NoSchedule {
      NoSchedule --> NewSchedule : schedule [event.schedule.legal(history)] / next_schedule = event.schedule
      NoSchedule --> IllegalSchedule : schedule [not event.schedule.legal(history)]
    }
    state "NewSchedule" as NewSchedule {
      NewSchedule --> NoSchedule : [next_schedule.compatible(history, time)] / schedule = next_schedule
    }
  }
  --
  state "History" as History {
    [*] --> AwaitHistory
    state "LightOff" as LightOff {
      LightOff --> AwaitHistory
    }
    state "LightOn" as LightOn {
      LightOn --> AwaitHistory
    }
    state "AwaitHistory" as AwaitHistory {
      AwaitHistory --> LightOff : light_off / history.append((event.signal, None, event.time))
      AwaitHistory --> LightOn : light_on / history.append((event.signal, event.color, event.time))
    }
  }
  --
  state "LightControl" as LightControl {
    [*] --> Off
    state "On" as On {
      On : **entry** / send('light_on', signal=signal_id, color=color)
      On :
      On : **pre:** not schedule.empty(time)
      On --> Off : [active('Stopped') or active('BrokenLights') or schedule.empty(time)]
      On --> On : [not schedule.empty(time) and schedule[group_id, time] != color] / color = schedule[group_id, time]; send('light_on', signal=signal_id, color=color, time=time)
    }
    state "Off" as Off {
      Off : **entry** / send('light_off', signal=signal_id, time=time); color == 'red'
      Off :
      Off : **post:** color == 'red'
      Off --> On : [active('Running') and active('HealthyLights') and not schedule.empty(time)]
    }
  }
  --
  state "LocalSignalHealthMonitoring" as LocalSignalHealthMonitoring {
    [*] --> HealthyLights
    state "BrokenLights" as BrokenLights {
      BrokenLights : **entry** / send('broken_signal', group=group_id, signal=signal_id)
    }
    state "HealthyLights" as HealthyLights {
      HealthyLights : **entry** / send('join_signal', group=group_id, signal=signal_id)
      HealthyLights --> BrokenLights : dead_light
    }
  }
  --
  state "RemoteSignalHealthMonitoring" as RemoteSignalHealthMonitoring {
    [*] --> AwaitRemote
    state "BrokenSignal" as BrokenSignal {
      BrokenSignal --> AwaitRemote
    }
    state "JoinSignal" as JoinSignal {
      JoinSignal --> AwaitRemote
    }
    state "AwaitRemote" as AwaitRemote {
      AwaitRemote --> JoinSignal : join_signal / as.add(event.signal); ag.add(event.group); g[event.signal] = event.group
      AwaitRemote --> BrokenSignal : broken_signal / as.discard(event.signal); ag = set(map(lambda s: g[s], as))
    }
  }
  --
  state "IntersectionHealth" as IntersectionHealth {
    [*] --> DecideStart
    state "Running" as Running {
      Running : **inv:** len(ag) == ngi
      Running --> Stopped : [len(ag) < ngi]
    }
    state "Stopped" as Stopped {
      Stopped : **inv:** len(ag) < ngi
      Stopped : **inv:** len(ag) >= 0
      Stopped --> Running : [len(ag) = ngi]
    }
    state "DecideStart" as DecideStart {
      DecideStart --> Running : [len(ag) == ngi]
      DecideStart --> Stopped : [len(ag) < ngi]
    }
  }
}
@enduml
