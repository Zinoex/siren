# Underlying assumptions:
# - Reliable (integrity and liveness) communication channels
# - Authenticated and signed communication
# - All messages/events are sent using reliable multicast - a controller sends its value to every member of the group reliably (integrity, validity, and agreement)
# - An upper bound, D, on propagation delay

statechart:
  name: Coordination
  # We assume:
  # - signal_id
  # - group_id
  # - ngi - number of groups in intersection
  # - schedule_decision - decision function for schedule sync
  # - Schedule
  # - T - heartbeat transmission interval
  # - D - propagation delay
  # are defined appropriately in the interpreter context.
  # See https://sismic.readthedocs.io/en/latest/code.html#context-of-the-python-code-evaluator.
  preamble: |
    ag = set()  # active signal groups
    as = set()  # active signals
    hb = {signal_id: 0}
    g = {signal_id: group_id}
    color = 'red'
    schedule = Schedule()
    next_schedule = None
    history = []
  root state:
    name: Node
    parallel states:
      - name: IntersectionHealth
        initial: DecideStart
        states:
          - name: DecideStart
            transitions:
              - target: Running
                guard: len(ag) == ngi
              - target: Stopped
                guard: len(ag) < ngi
          - name: Stopped
            transitions:
              - target: Running
                guard: len(ag) = ngi
            contract:
              - always: len(ag) < ngi
              - always: len(ag) >= 0
          - name: Running
            transitions:
              - target: Stopped
                guard: len(ag) < ngi
            contract:
              - always: len(ag) == ngi
      - name: RemoteSignalHealthMonitoring
        initial: AwaitRemote
        states:
          - name: AwaitRemote
            transitions:
              - target: JoinSignal
                event: join_signal
                action: |
                  as.add(event.signal)
                  ag.add(event.group)
                  g[event.signal] = event.group
              - target: BrokenSignal
                event: broken_signal
                action: |
                  as.discard(event.signal)
                  ag = set(map(lambda s: g[s], as))
          - name: JoinSignal
            transitions:
              - target: AwaitRemote
          - name: BrokenSignal
            transitions:
              - target: AwaitRemote
      - name: LocalSignalHealthMonitoring
        initial: HealthyLights
        states:
          - name: HealthyLights
            on entry: send('join_signal', group=group_id, signal=signal_id)
            transitions:
              - target: BrokenLights
                event: dead_light
          - name: BrokenLights
            on entry: send('broken_signal', group=group_id, signal=signal_id)
      - name: LightControl
        initial: Off
        states:
          - name: Off
            on entry: |
              send('light_off', signal=signal_id, time=time)
              color == 'red'
            transitions:
              - target: On
                guard: active('Running') and active('HealthyLights') and not schedule.empty(time)
            contract:
              - after: color == 'red'
          - name: On
            on entry: send('light_on', signal=signal_id, color=color)
            transitions:
              - target: Off
                guard: active('Stopped') or active('BrokenLights') or schedule.empty(time)
              - target: On
                guard: not schedule.empty(time) and schedule[group_id, time] and schedule[group_id, time] != color
                action: |
                  color = schedule[group_id, time]
                  send('light_on', signal=signal_id, color=color, time=time)
              - target: TemporaryOff
                guard: not schedule.empty(time) and not schedule[group_id, time]
                action: color = None
            contract:
              - before: not schedule.empty(time)
          - name: TemporaryOff
            on entry: send('light_off', signal=signal_id, time=time)
            transitions:
              - target: On
                guard: not schedule.empty(time) and not schedule[group_id, time]
                action: color = schedule[group_id, time]
      - name: History
        initial: AwaitHistory
        states:
          - name: AwaitHistory
            transitions:
              - target: LightOff
                event: light_off
                action: history.append((event.signal, None, event.time))
              - target: LightOn
                event: light_on
                action: history.append((event.signal, event.color, event.time))
          - name: LightOn
            transitions:
              - target: AwaitHistory
          - name: LightOff
            transitions:
              - target: AwaitHistory
      - name: ScheduleManagement
        initial: NoSchedule
        states:
          - name: NewSchedule
            transitions:
              - target: NoSchedule
                guard: next_schedule.compatible(history, time)
                action: schedule = next_schedule
          - name: NoSchedule
            transitions:
              - target: NewSchedule
                event: schedule
                guard: event.schedule.legal(history)
                action: next_schedule = event.schedule
              - target: IllegalSchedule
                event: schedule
                guard: not event.schedule.legal(history)
          - name: IllegalSchedule
            on entry: next_schedule = time_schedule
            initial: NewTimeSchedule
            states:
              - name: NewTimeSchedule
                transitions:
                  - target: RunningTimeSchedule
                    guard: next_schedule.compatible(history, time)  # TODO: Shutoff if time_schedule is illegal
              - name: RunningTimeSchedule
                on entry: schedule = next_schedule
            transitions:
              - target: NewSchedule
                event: schedule
                guard: event.schedule.legal(history)
                action: next_schedule = event.schedule
      - name: Heartbeat
        # If we assume an interval, T, between heartbeats.
        # Then if the time between two heartbeats is more than T + 2 * D for any node, we can assume that this node is dead.
        initial: HeartbeatRest
        states:
          - name: HeartbeatRest
            transitions:
              - target: HeartbeatSend
                guard: time - hb[signal_id] > T
              - target: HeartbeatReceive
                event: heartbeat
                action: |
                  as.add(event.signal)
                  ag.add(event.group)
                  g[event.signal] = event.group
                  hb[event.signal] = time
              - target: HeartbeatPrune
                guard: |
                  any(map(lambda heartbeat: time - heartbeat > T + 2 * D, hb.values()))
          - name: HeartbeatReceive
            transitions:
              - target: HeartbeatRest
          - name: HeartbeatSend
            on entry: send('heartbeat', signal=signal_id, group=group_id)
            transitions:
              - target: HeartbeatRest
          - name: HeartbeatPrune
            on entry: |
              as -= set(map(lambda s: s[0], filter(lambda s: time - s[1] > T + 2 * D, hb.items())))
              ag = set(map(lambda s: g[s], as))
            transitions:
              - target: HeartbeatRest
