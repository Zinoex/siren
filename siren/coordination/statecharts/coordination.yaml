# Underlying assumptions:
# - Reliable (integrity and liveness) communication channels
# - Authenticated and signed communication
# - All messages are sent using reliable multicast - a controller sends its value to every member of the group reliably (integrity, validity, and agreement)
# - An upper bound, D, on propagation delay

statechart:
  name: Coordination
  # We assume signal_id, group_id and ngi are defined appropriately in the interpreter context.
  # See https://sismic.readthedocs.io/en/latest/code.html#context-of-the-python-code-evaluator.
  preamble: |
    ag = set()  # active signal groups
    as = set()  # active signals
    r = {signal_id: Round(0, None, None)}  # synchronization dict
    color = 'red'
  root state:
    name: Node
    parallel states:
      - name: IntersectionHealth
        initial: StartIntersectionMonitoring
        states:
          - name: StartIntersectionMonitoring  # TODO: Distinguish between the first light and the rest.
            transitions:
              - target: Running
                event: group_alive
                guard: event.group == group_id and len(ag) + 1 == ngi
                action: ag.add(group_id)
              - target: Stopped
                event: group_alive
                guard: event.group == group_id and len(ag) + 1 < ngi
                action: ag.add(group_id)
          - name: Running  # TODO: Update number of active signal groups and their ids (piggyback the sync)
            transitions:
              - target: Stopped
                event: dead_group
                action: ag.discard(event.group)
            contract:
              - always: len(ag) == ngi
              - always: group_id in ag
          - name: Stopped
            transitions:
              - target: Stopped
                event: dead_group
                guard: len(ag) > 0
                action: ag.discard(event.group)
              - target: Running
                event: group_alive
                guard: len(ag) + 1 = ngi
                action: ag.add(event.group)
              - target: Stopped
                event: group_alive
                guard: len(ag) + 1 < ngi
                action: ag.add(event.group)
            contract:
              - always: len(ag) < ngi
              - always: len(ag) >= 0
      - name: SignalGroupHealth
        initial: StartGroupMonitoring
        states:
          - name: StartGroupMonitoring
            transitions:
              - target: HealthyGroup
                event: join_signal
                guard: event.signal == signal_id
                action: as.add(signal_id)
          - name: HealthyGroup
            on entry: send('group_alive', group=group_id)
            transitions:
              - target: HealthyGroup  # TODO: Update number of signals (piggyback the sync)
                event: broken_signal
                guard: len(as) > 1
                action: as.discard(event.signal)
              - target: HealthyGroup
                event: join_signal
                action: as.add(event.signal)
              - target: DeadGroup
                event: broken_signal
                guard: len(as) == 1
            contract:
              - always: len(as) > 0
              - always: signal_id in as
          - name: DeadGroup
            on entry: send('dead_group', group=group_id)
            transitions:
              - target: HealthyGroup
                event: join_signal
                action: as.add(event.signal)
            contract:
              - always: len(as) == 0
      - name: SignalHealth
        initial: HealthyLights
        states:
          - name: HealthyLights
            on entry: send('join_signal', group=group_id, signal=signal_id)
            transitions:
              - target: BrokenLights
                event: dead_light
                guard: event.signal == signal_id
          - name: BrokenLights
            on entry: send('broken_signal', group=group_id, signal=signal_id)
      - name: LightControl  # TODO: Implement conflict analysis - revert back to interval-based schedule if a conflict is met.
        initial: LightHistory
        states:
          - name: LightHistory
            type: shallow history
          - name: Off
            on entry: |
              send('light_off')
              color == 'red'
            transitions:
              - target: On
                guard: active('Running') and active('HealthyLights')
            contract:
              - after: color == 'red'
          - name: On  # TODO: Implement schedule stepping
            on entry: send('light_on', signal=signal_id, color=color)
            transitions:
              - target: Off
                event: broken_signal
                guard: event.signal = signal_id
              - target: Off
                guard: active('Stopped')
      - name: Synchronization
        # We want to synchronize time and schedule amongst all the controllers.
        # Using reliable multicast, we can perform synchronization in rounds by everybody transmitting a tuple of (round, timestamp, schedule).
        # When every controller uses reliable multicast to transmit its values,
        # we know that every member of the group has received the values from everybody else.
        # A decision function (avg) is applied when all timestamps are received, and clocks are updated accordingly.
        # The decision function for the schedules can be implemented as "select the latest schedule".
        #
        # If we assume an upper bound, T, on the interval between rounds of synchronization.
        # Then if the time between two rounds is more than T + D for any node, we can assume that this node is dead.
        # TODO: Implement synchronization